import aiogram
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup


BOT_TOKEN: str = "<BOT TOKEN>"
# ID –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤.
ADMINS: tuple[int] = tuple()

bot = aiogram.Bot(token=BOT_TOKEN)
dp = aiogram.Dispatcher(bot)


class Storage:
    def __init__(self):
        self.i = {}


db = Storage()


def get_another_admin(admin_id) -> int:
    if ADMINS[0] == admin_id:
        return ADMINS[1]
    return ADMINS[0]


def get_keyboard(form_user_id: int) -> InlineKeyboardMarkup:
    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton(text="üìù –û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"answer_{form_user_id}"))
    return kb


@dp.message_handler(commands=["start"])
async def start_message(message: aiogram.types.Message):
    user_id = message.chat.id

    if user_id in ADMINS:
        text = "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç. –û–∂–∏–¥–∞—é –≤–æ–ø—Ä–æ—Å–æ–≤ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."
    else:
        text = ("<b>–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, —ç—Ç–æ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –±–æ—Ç–∞ –í–æ–ª–Ω–∞ –ë–∞–ª—Ç–∏–∫–∏.</b>\n"
                "–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –æ–ø–∏—à–∏—Ç–µ –∏—Ö –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ë–æ—Ç—É. "
                "–ï—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ, –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –∏–ª–∏ –≤–∏–¥–µ–æ–∑–∞–ø–∏—Å—å —ç–∫—Ä–∞–Ω–∞.")
    await message.answer(text, parse_mode="html")


@dp.message_handler(content_types=['text', 'audio', 'document', 'animation', 'photo', 'sticker', 'video',
                                   'video_note', 'voice'])
async def text_message(message: aiogram.types.Message):
    user_id = message.chat.id
    username = message.chat.username
    if username:
        username = "@" + username
    else:
        username = "-"

    if user_id in ADMINS:
        other_id = db.i.get(user_id)
        if other_id:
            db.i[user_id] = False
            await message.copy_to(other_id)

            for admin_id in ADMINS:
                text = (f"‚òëÔ∏è –ë—ã–ª –¥–∞–Ω –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é <code>{other_id}</code>\n\n"
                        f"–¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞:")
                await bot.send_message(admin_id, text, parse_mode="html")
                await message.forward(admin_id)

        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ - –≤—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–≤–µ—Ç–∞")

    else:
        text = ("‚úâÔ∏è <b>–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ</b>\n"
                f"ID: <code>{user_id}</code>\n"
                f"Username: {username}\n\n"
                f"–°–æ–æ–±—â–µ–Ω–∏–µ:")
        try:
            for admin_id in ADMINS:
                await bot.send_message(admin_id, text, parse_mode="html", reply_markup=get_keyboard(user_id))
                await message.forward(admin_id)
        except:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ - –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
        else:
            await message.answer("‚òëÔ∏è –í–∞—à –≤–æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –ü–æ—Å—Ç–∞—Ä–∞–µ–º—Å—è –æ—Ç–≤–µ—Ç–∏—Ç—å –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.")


@dp.callback_query_handler()
async def inline_message(call: aiogram.types.CallbackQuery):
    user_id = call.message.chat.id
    if user_id in ADMINS:
        other_id = int(call.data.replace("answer_", ""))
        db.i[user_id] = other_id
        text = (f"üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <code>{other_id}</code>.\n"
                f"–ú–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–µ–¥–∏–∞ –¥–ª—è –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è.")
        await call.message.answer(text, parse_mode="html")


async def start_msg(_):
    text = "–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω"
    for admin_id in ADMINS:
        await bot.send_message(admin_id, text)


async def stop_msg(_):
    text = "–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    for admin_id in ADMINS:
        await bot.send_message(admin_id, text)


if __name__ == "__main__":
    aiogram.executor.start_polling(dp, on_startup=start_msg, on_shutdown=stop_msg)
